From: <Saved by Blink>
Snapshot-Content-Location: https://lkml.iu.edu/hypermail/linux/kernel/9608/0191.html
Subject: Linux-Kernel Archive: Re: proc fs and shared pids
Date: Sat, 12 Apr 2025 14:50:10 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--DGf6Vtxm3X0dItt53iFf5UQ2WupMXD9RBpwgmXVRV8----"


------MultipartBoundary--DGf6Vtxm3X0dItt53iFf5UQ2WupMXD9RBpwgmXVRV8----
Content-Type: text/html
Content-ID: <frame-5CC777F4626529A5C8EFA240C2C82B85@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://lkml.iu.edu/hypermail/linux/kernel/9608/0191.html

<!-- received=3D"Tue Aug  6 08:34:11 1996 EST" --><!-- sent=3D"Tue, 6 Aug 1=
996 12:47:31 +0300 (EET DST)" --><!-- name=3D"Linus Torvalds" --><!-- email=
=3D"torvalds@cs.helsinki.fi" --><!-- subject=3D"Re: proc fs and shared pids=
" --><!-- id=3D"199608060453.VAA22963@goodguy.goodnet.com" --><!-- inreplyt=
o=3D"3206A33F.D9A@llab.chinalake.navy.mil" --><html><head><meta http-equiv=
=3D"Content-Type" content=3D"text/html; charset=3DUTF-8"><title>Linux-Kerne=
l Archive: Re: proc fs and shared pids</title>
</head><body><h1>Re: proc fs and shared pids</h1>
Linus Torvalds (<i>torvalds@cs.helsinki.fi</i>)<br>
<i>Tue, 6 Aug 1996 12:47:31 +0300 (EET DST)</i>
<p>
</p><ul>
<li> <b>Messages sorted by:</b> <a href=3D"https://lkml.iu.edu/hypermail/li=
nux/kernel/9608/date.html#191">[ date ]</a><a href=3D"https://lkml.iu.edu/h=
ypermail/linux/kernel/9608/index.html#191">[ thread ]</a><a href=3D"https:/=
/lkml.iu.edu/hypermail/linux/kernel/9608/subject.html#191">[ subject ]</a><=
a href=3D"https://lkml.iu.edu/hypermail/linux/kernel/9608/author.html#191">=
[ author ]</a>
<!-- next=3D"start" -->
</li><li> <b>Next message:</b> <a href=3D"https://lkml.iu.edu/hypermail/lin=
ux/kernel/9608/0192.html">Bernd P. Ziller: "Re: Oops in get_hash_table"</a>
</li><li> <b>Previous message:</b> <a href=3D"https://lkml.iu.edu/hypermail=
/linux/kernel/9608/0190.html">Linus Torvalds: "Re: I/O request ordering"</a=
>
<!-- nextthread=3D"start" -->
<!-- reply=3D"end" -->
</li></ul>
<hr>
<!-- body=3D"start" -->
On Mon, 5 Aug 1996, Peter P. Eiserloh wrote:<br>
<i>&gt; </i><br>
<i>&gt; We need to keep a clear the concept of threads.  Too many people</i=
><br>
<i>&gt; seem to confuse a thread with a process.  The following discussion<=
/i><br>
<i>&gt; does not reflect the current state of linux, but rather is an</i><b=
r>
<i>&gt; attempt to stay at a high level discussion.</i><br>
<p>
NO!<br>
</p><p>
There is NO reason to think that "threads" and "processes" are separate<br>
entities. That's how it's traditionally done, but I personally think it's a=
<br>
major mistake to think that way. The only reason to think that way is<br>
historical baggage. <br>
</p><p>
Both threads and processes are really just one thing: a "context of<br>
execution".  Trying to artificially distinguish different cases is just<br>
self-limiting. <br>
</p><p>
A "context of execution", hereby called COE, is just the conglomerate of <b=
r>
all the state of that COE. That state includes things like CPU state <br>
(registers etc), MMU state (page mappings), permission state (uid, gid) <br=
>
and various "communication states" (open files, signal handlers etc).<br>
</p><p>
Traditionally, the difference between a "thread" and a "process" has been<b=
r>
mainly that a threads has CPU state (+ possibly some other minimal state),<=
br>
while all the other context comes from the process. However, that's just<br=
>
_one_ way of dividing up the total state of the COE, and there is nothing<b=
r>
that says that it's the right way to do it. Limiting yourself to that kind =
of<br>
image is just plain stupid. <br>
</p><p>
The way Linux thinks about this (and the way I want things to work) is that=
<br>
there _is_ no such thing as a "process" or a "thread". There is only the<br=
>
totality of the COE (called "task" by Linux). Different COE's can share par=
ts<br>
of their context with each other, and one _subset_ of that sharing is the<b=
r>
traditional "thread"/"process" setup, but that should really be seen as ONL=
Y<br>
a subset (it's an important subset, but that importance comes not from<br>
design, but from standards: we obviusly want to run standards-conforming<br=
>
threads programs on top of Linux too). <br>
</p><p>
In short: do NOT design around the thread/process way of thinking. The <br>
kernel should be designed around the COE way of thinking, and then the <br>
pthreads _library_ can export the limited pthreads interface to users who <=
br>
want to use that way of looking at COE's.<br>
</p><p>
Just as an example of what becomes possible when you think COE as opposed <=
br>
to thread/process:<br>
</p><p>
 - You can do a external "cd" program, something that is traditionally<br>
   impossible in UNIX and/or process/thread (silly example, but the idea <b=
r>
   is that you can have these kinds of "modules" that aren't limited to <br=
>
   the traditional UNIX/threads setup). Do a:<br>
</p><p>
	clone(CLONE_VM|CLONE_FS);<br>
	child: execve("external-cd");<br>
	/* the "execve()" will disassociate the VM, so the only reason we <br>
	   used CLONE_VM was to make the act of cloning faster */<br>
</p><p>
 - You can do "vfork()" naturally (it meeds minimal kernel support, but <br=
>
   that support fits the CUA way of thinking perfectly):<br>
</p><p>
	clone(CLONE_VM);<br>
	child: continue to run, eventually execve()<br>
	mother: wait for execve<br>
</p><p>
 - you can do external "IO deamons":<br>
</p><p>
	clone(CLONE_FILES);<br>
	child: open file descriptors etc<br>
	mother: use the fd's the child opened and vv.<br>
</p><p>
All of the above work because you aren't tied to the thread/process way of<=
br>
thinking. Think of a web server for example, where the CGI scripts are done=
<br>
as "threads of execution". You can't do that with traditional threads,<br>
because traditional threads always have to share the whole address space, s=
o<br>
you'd have to link in everything you ever wanted to do in the web server<br=
>
itself (a "thread" can't run another executable). <br>
</p><p>
Thinking of this as a "context of execution" problem instead, your tasks ca=
n<br>
now chose to execute external programs (=3D separate the address space from=
 the<br>
parent) etc if they want to, or they can for example share everything with<=
br>
the parent _except_ for the file descriptors (so that the sub-"threads" can=
<br>
open lots of files without the parent needing to worry about them: they clo=
se<br>
automatically when the sub-"thread" exits, and it doesn't use up fd's in th=
e<br>
parent). <br>
</p><p>
Think of a threaded "inetd", for example. You want low overhead fork+exec, =
so<br>
with the Linux way you can instead of using a "fork()" you write a<br>
multi-threaded inetd where each thread is created with just CLONE_VM (share=
<br>
address space, but don't share file descriptors etc).  Then the child can<b=
r>
execve if it was a external service (rlogind, for example), or maybe it was=
<br>
one of the internal inetd services (echo, timeofday) in which case it just<=
br>
does it's thing and exits. <br>
</p><p>
You can't do that with "thread"/"process".<br>
</p><p>
		Linus<br>
<!-- body=3D"end" -->
</p><hr>
<p>
</p><ul>
<!-- next=3D"start" -->
<li> <b>Next message:</b> <a href=3D"https://lkml.iu.edu/hypermail/linux/ke=
rnel/9608/0192.html">Bernd P. Ziller: "Re: Oops in get_hash_table"</a>
</li><li> <b>Previous message:</b> <a href=3D"https://lkml.iu.edu/hypermail=
/linux/kernel/9608/0190.html">Linus Torvalds: "Re: I/O request ordering"</a=
>
<!-- nextthread=3D"start" -->
<!-- reply=3D"end" -->
</li></ul>
<div class=3D"bilingual-translate-icon" style=3D"position: absolute; displa=
y: none; width: 24px; height: 24px; border-radius: 50%; background-color: r=
gb(255, 255, 255); background-image: url(&quot;data:image/svg+xml;utf8,<svg=
 xmlns=3D\&quot;http://www.w3.org/2000/svg\&quot; viewBox=3D\&quot;0 0 24 2=
4\&quot; fill=3D\&quot;%23000000\&quot;><path d=3D\&quot;M12.87 15.07l-2.54=
-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 =
7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.=
98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11.76-2.04zM18.5 10h-2L12 22h2l1.12-3h4.=
75L21 22h2l-4.5-12zm-2.62 7l1.62-4.33L19.12 17h-3.24z\&quot;/></svg>&quot;)=
; background-size: 16px; background-repeat: no-repeat; background-position:=
 center center; box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 6px; cursor: pointer=
; z-index: 999999; transition: transform 0.2s; border: 1px solid rgba(0, 12=
1, 211, 0.133);"></div><div class=3D"bilingual-translate-popup" style=3D"di=
splay: none;"></div></body></html>
------MultipartBoundary--DGf6Vtxm3X0dItt53iFf5UQ2WupMXD9RBpwgmXVRV8------
